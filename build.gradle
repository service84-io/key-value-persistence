plugins {
  id 'com.diffplug.eclipse.apt' version '3.22.0'
  id 'maven'
  id 'signing'
  id 'maven-publish'
  id 'java-library'
  id 'eclipse'
  id 'java'
}

apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'java'

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives javadocJar, sourcesJar
}

signing {
  sign configurations.archives
}
tasks.withType(Sign) {
  onlyIf { project.hasProperty('signing.keyId') }
}

java {
  withJavadocJar()
  withSourcesJar()
}

jar {
  baseName = 'keyvaluepersistence'
  version = '1.0.0'
  enabled = true
}

uploadArchives {
  repositories {
    mavenDeployer {
      def ossrhUsername = project.hasProperty('ioService84OSSUsername') ? ioService84OSSUsername : "Unknown user"
      def ossrhPassword = project.hasProperty('ioService84OSSPassword') ? ioService84OSSPassword : "Unknown password"

      beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
        authentication(userName: ossrhUsername, password: ossrhPassword)
      }

      pom.project {
        name 'Key Value Persistence'
        packaging 'jar'
        description 'Provides a persisted key value service in a Spring service'
        groupId 'io.service84.library'
        artifactId jar.baseName
        version = jar.version
        url 'https://github.com/service84-io/key-value-persistence'

        scm {
          connection 'scm:git:https://github.com/service84-io/key-value-persistence.git'
          developerConnection 'scm:git:https://github.com/service84-io/key-value-persistence.git'
          url 'https://github.com/service84-io/key-value-persistence'
        }

        licenses {
          license {
            name 'The Apache License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }

        developers {
          developer {
            id 'tyler'
            name 'Tyler'
            email 'Tyler@service84.io'
          }
        }
      }
    }
  }
}

sourceCompatibility = 11.0

repositories {
  jcenter()
  mavenCentral()
  maven { url 'https://plugins.gradle.org/m2/' }
}

configurations.all {
  exclude module: 'slf4j-jdk14'
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.3.1.RELEASE'

  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.10.4'

  implementation 'org.hibernate:hibernate-envers:5.4.22.Final'

  ////////////////////////////////
  //Test Dependencies/////////////
  ////////////////////////////////
  testImplementation 'org.springframework.boot:spring-boot-starter-test:2.3.1.RELEASE'

  ////////////////////////////////
  //JPA Specification/////////////
  //Metamodel Generator///////////
  ////////////////////////////////
  annotationProcessor 'org.hibernate:hibernate-jpamodelgen:5.4.14.Final'
}

eclipse {
  synchronizationTasks eclipseFactorypath
  synchronizationTasks eclipseJdt
  synchronizationTasks eclipseJdtApt
}

test {
  useJUnitPlatform()
}
